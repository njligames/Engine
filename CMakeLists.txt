CMAKE_MINIMUM_REQUIRED(VERSION 3.7.2)
PROJECT (NJLIGameEngine)
include (CPack)
#INCLUDE (CTest)

SET_PROPERTY(GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS TRUE)

SET( CMAKE_INSTALL_INCLUDEDIR include/ CACHE STRING "The include directory" )
SET( CMAKE_INSTALL_DATADIR data/ CACHE STRING "The data directory" )
SET( CMAKE_INSTALL_DOCDIR doc/ CACHE STRING "The documentation directory" )
SET( CMAKE_INSTALL_TESTDIR tests/ CACHE STRING "The tests directory" )
SET( NJLI_THIRDPARTY_DIRECTORY "${CMAKE_SOURCE_DIR}/../External/thirdparty/" CACHE STRING "The third party include directory")
SET( NJLI_SOURCE_DIRECTORY "${CMAKE_SOURCE_DIR}/src/njli/" CACHE STRING "The njli source directory")

option ( GENERATE_DOCUMENTATION "Whether to build the documentation or not" OFF )
option ( GENERATE_LIB "Whether to build the documentation or not" ON )

macro(BUILD_DOCUMENTATION)
    FIND_PACKAGE(Doxygen)
    IF(DOXYGEN_FOUND)
        CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake.in/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
        ADD_CUSTOM_TARGET(doc ALL
            ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/cmake.in
            COMMENT "Generating API documentation with Doxygen" VERBATIM
            )
        INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/cmake.in/docbook DESTINATION ${CMAKE_INSTALL_DOCDIR})
        INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/cmake.in/html DESTINATION ${CMAKE_INSTALL_DOCDIR})
        INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/cmake.in/latex DESTINATION ${CMAKE_INSTALL_DOCDIR})
        INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/cmake.in/rtf DESTINATION ${CMAKE_INSTALL_DOCDIR})
        INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/cmake.in/xml DESTINATION ${CMAKE_INSTALL_DOCDIR})
    ENDIF(DOXYGEN_FOUND)

    ADD_CUSTOM_TARGET(luadoc ALL
        ldoc ${CMAKE_CURRENT_SOURCE_DIR}/cmake.in/ldoc.in/
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        COMMENT "Generating API documentation with LDoc" VERBATIM
        )
    INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/ldoc DESTINATION ${CMAKE_INSTALL_DOCDIR})

    SET(NJLIGameEngine_TESTFILES
        ${CMAKE_SOURCE_DIR}/cmake.in/Tests.in/lua/njli_test.lua
        )
    INSTALL(FILES ${NJLIGameEngine_TESTFILES} DESTINATION ${CMAKE_INSTALL_TESTDIR})

    SET(NJLIGameEngine_DATAFILES
        ${CMAKE_SOURCE_DIR}/cmake.in/DoxyFiles.in/images/logo.png
        )
    INSTALL(FILES ${NJLIGameEngine_DATAFILES} DESTINATION ${CMAKE_INSTALL_DATADIR})
endmacro()


macro( BUILD_PLATFORM )

    # The version number.
    SET (NJLIGameEngine_VERSION_MAJOR 1)
    SET (NJLIGameEngine_VERSION_MINOR 0)

    # configure a header file to pass some of the CMake settings
    # to the source code
    CONFIGURE_FILE (
        "${CMAKE_SOURCE_DIR}/cmake.in/NJLIGameEngineConfig.h.in"
        "${NJLI_SOURCE_DIRECTORY}/generated/NJLIGameEngineConfig.h"
        )

    INCLUDE_DIRECTORIES(${NJLI_SOURCE_DIRECTORY} )
    INCLUDE_DIRECTORIES(${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/assimp )
    INCLUDE_DIRECTORIES(${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3 )
    #INCLUDE_DIRECTORIES(${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/debug-draw )
    #INCLUDE_DIRECTORIES(${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/flatbuffers )
    #INCLUDE_DIRECTORIES(${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/glfw )
    INCLUDE_DIRECTORIES(${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/glm )
    INCLUDE_DIRECTORIES(${NJLI_THIRDPARTY_DIRECTORY}/BUILD/imgui )
    INCLUDE_DIRECTORIES(${NJLI_THIRDPARTY_DIRECTORY}/BUILD/ImGuizmo )
    INCLUDE_DIRECTORIES(${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/jsoncpp )
    INCLUDE_DIRECTORIES(${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/lua )
    #INCLUDE_DIRECTORIES(${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/opencv )
    #INCLUDE_DIRECTORIES(${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/sqlite )
    #INCLUDE_DIRECTORIES(${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/stb )
    INCLUDE_DIRECTORIES(${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/tinyxml2 )

    SET(NJLIGameEngine_PUBLIC_HDRS
        ${NJLI_SOURCE_DIRECTORY}/hello_public.h
        )

    file(GLOB Lua_SRCS
        "${NJLI_SOURCE_DIRECTORY}/generated/swig/lua/njli_wrap.cxx"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lapi.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lapi.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lauxlib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lauxlib.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lbaselib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lbitlib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lcode.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lcode.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lcorolib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lctype.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lctype.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ldblib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ldebug.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ldebug.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ldo.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ldo.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ldump.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lfunc.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lfunc.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lgc.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lgc.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/linit.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/liolib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/llex.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/llex.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/llimits.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lmathlib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lmem.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lmem.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/loadlib.c"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/loadlib_rel.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lobject.c"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/lobject.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lopcodes.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lopcodes.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/loslib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lparser.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lparser.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lprefix.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lstate.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lstate.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lstring.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lstring.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lstrlib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ltable.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ltable.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ltablib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ltm.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ltm.h"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/lua.c"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/lua.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lua.hpp"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/lua.rc"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/luac.c"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/luac.rc"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/luaconf.h.in"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/luaconf.h.orig"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/lualib.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lundump.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lundump.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lutf8lib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lvm.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lvm.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lzio.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lzio.h"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/wmain.c"
        )

    file(GLOB NJLIGameEngine_SRCS
        "${NJLI_SOURCE_DIRECTORY}/*.h"
        "${NJLI_SOURCE_DIRECTORY}/*.cpp"
        )

    ADD_LIBRARY( libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} STATIC ${NJLIGameEngine_SRCS} ${Lua_SRCS})
    SET_TARGET_PROPERTIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} PROPERTIES OUTPUT_NAME libnjli)

    INSTALL(TARGETS libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} DESTINATION lib/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE})
    IF(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
        TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/assimp/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libassimpd.a )
    ELSE()
        TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/assimp/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libassimp.a )
    ENDIF()
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBullet2FileLoader.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBullet3Collision.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBullet3Common.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBullet3Dynamics.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBullet3Geometry.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBullet3OpenCL_clew.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletCollision.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletDynamics.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletFileLoader.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletInverseDynamics.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletInverseDynamicsUtils.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletSoftBody.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletWorldImporter.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletXmlWorldImporter.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libConvexDecomposition.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libGIMPACTUtils.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libHACD.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libLinearMath.a )
    #TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/flatbuffers/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libflatbuffers.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/imgui/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/libimgui.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/ImGuizmo/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/libImGuizmo.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/jsoncpp/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/libjsoncpp.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/lua/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/liblua.a )
    TARGET_LINK_LIBRARIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/tinyxml2/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/libtinyxml2.a )
    SET_TARGET_PROPERTIES(libnjli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} PROPERTIES PREFIX "")

    SET(Binary_FILES
        )

        IF( ${NJLI_BUILD_PLATFORM} STREQUAL "emscripten" )
            SET(Binary_FILES
                ${Binary_FILES}
                #${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/flatbuffers/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/bin/flatc 
                ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/lua/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/bin/lua.js
                ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/lua/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/bin/luac.js
                )
        ELSE()
            SET(Binary_FILES
                ${Binary_FILES}
                #${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/flatbuffers/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/bin/flatc 
                ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/lua/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/bin/lua 
                ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/lua/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/bin/luac 
                )
        ENDIF()

    IF(${CMAKE_BUILD_TYPE} STREQUAL "Debug")

                IF( ${NJLI_BUILD_PLATFORM} STREQUAL "emscripten" )
                    SET(Binary_FILES
                        ${Binary_FILES}
                        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/assimp/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/bin/assimpd.js
                        )
                ELSE()
                    SET(Binary_FILES
                        ${Binary_FILES}
                        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/assimp/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/bin/assimpd
                        )
                ENDIF()

    ELSE()
                IF( ${NJLI_BUILD_PLATFORM} STREQUAL "emscripten" )
                    SET(Binary_FILES
                        ${Binary_FILES}
                        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/assimp/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/bin/assimp.js
                        )
                ELSE()
                    SET(Binary_FILES
                        ${Binary_FILES}
                        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/assimp/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/bin/assimp
                        )
                ENDIF()
    ENDIF()

    INSTALL(PROGRAMS ${Binary_FILES} DESTINATION bin/thirdparty/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE} )

    INCLUDE_DIRECTORIES(${NJLI_SOURCE_DIRECTORY} )

    ADD_LIBRARY( njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} MODULE ${NJLIGameEngine_SRCS} ${Lua_SRCS} )
    SET_TARGET_PROPERTIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} PROPERTIES OUTPUT_NAME njli)

    IF(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
        TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/assimp/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libassimpd.a )
    ELSE()
        TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/assimp/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libassimp.a )
    ENDIF()
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBullet2FileLoader.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBullet3Collision.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBullet3Common.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBullet3Dynamics.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBullet3Geometry.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBullet3OpenCL_clew.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletCollision.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletDynamics.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletFileLoader.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletInverseDynamics.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletInverseDynamicsUtils.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletSoftBody.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletWorldImporter.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletXmlWorldImporter.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libConvexDecomposition.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libGIMPACTUtils.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libHACD.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libLinearMath.a )
    #TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/flatbuffers/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libflatbuffers.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/imgui/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/libimgui.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/ImGuizmo/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/libImGuizmo.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/jsoncpp/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/libjsoncpp.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/lua/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/liblua.a )
    TARGET_LINK_LIBRARIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/tinyxml2/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/libtinyxml2.a )
    SET_TARGET_PROPERTIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} PROPERTIES PREFIX "")
    SET_TARGET_PROPERTIES(njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} PROPERTIES SUFFIX ".so")

    INSTALL(TARGETS njli_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} DESTINATION module/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE} )

    INSTALL(FILES ${NJLIGameEngine_PUBLIC_HDRS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

    MATH(EXPR BUILD_COUNTER "${BUILD_COUNTER}+1")
endmacro()

#function(BUILD_ANDROID build_type)
#
#    SET( MY_API_LEVEL 24 )
#
#    SET( ANDROID_NATIVE_API_LEVEL ${MY_API_LEVEL} )
#    SET( ANDROID_STL c++_static )
#    SET( ANDROID_NDK /Users/jamesfolk/Library/Android/sdk/ndk-bundle )
#    SET( ANDROID_TOOLCHAIN=/Users/jamesfolk/Library/Android/sdk/ndk-bundle/build/cmake/android.toolchain.cmake )
#
#    SET( ANDROID_ABI "armeabi-v7a with NEON" )
#    BUILD_PLATFORM(${build_type} "android/${MY_API_LEVEL}/armeabi-v7a_neon" "android")
#
#    SET( ANDROID_ABI armeabi-v7a )
#    BUILD_PLATFORM(${build_type} "android/${MY_API_LEVEL}/armeabi-v7a" "android")
#
#    SET( ANDROID_ABI x86 )
#    BUILD_PLATFORM(${build_type} "android/${MY_API_LEVEL}/x86" "android")
#
#    SET( ANDROID_ABI mips )
#    BUILD_PLATFORM(${build_type} "android/${MY_API_LEVEL}/mips" "android")
#
#    SET( ANDROID_ABI arm64-v8a )
#    BUILD_PLATFORM(${build_type} "android/${MY_API_LEVEL}/arm64-v8a" "android")
#
#    SET( ANDROID_ABI x86_64 )
#    BUILD_PLATFORM(${build_type} "android/${MY_API_LEVEL}/x86_64" "android")
#
#    SET( ANDROID_ABI mips64 )
#    BUILD_PLATFORM(${build_type} "android/${MY_API_LEVEL}/mips64" "android")
#
#endfunction()
#
#function(BUILD_EMSCRIPTEN build_type)
#    SET( CMAKE_C_FLAGS "-D__linux__" "linux flags" )
#    SET( CMAKE_TOOLCHAIN_FILE "/Applications/Developer/emsdk_portable/emscripten/1.35.0/cmake/Modules/Platform/Emscripten.cmake" )
#
#    BUILD_PLATFORM(${build_type} "emscripten" "emscripten")
#endfunction()
#
#function(BUILD_IOS build_type)
#
#    SET( CMAKE_BUILD_TYPE ${build_type} )
#    SET( PLATFORM ios )
#    SET( FRAMEWORK ON  )
#    SET( SIMULATOR OFF )
#    SET( CMAKE_TOOLCHAIN_FILE "${NJLI_THIRDPARTY_DIRECTORY}/apple.toolchain.cmake" )
#    BUILD_PLATFORM(${build_type} "iOS/10.2/OS" "ios")
#
#    SET( CMAKE_BUILD_TYPE ${build_type} )
#    SET( PLATFORM ios )
#    SET( FRAMEWORK ON  )
#    SET( SIMULATOR ON )
#    SET( CMAKE_TOOLCHAIN_FILE "${NJLI_THIRDPARTY_DIRECTORY}/apple.toolchain.cmake" )
#    BUILD_PLATFORM(${build_type} "iOS/10.2/SIMULATOR" "ios")
#    
#endfunction()
#
#function(BUILD_LINUX build_type)
#endfunction()
#
#function(BUILD_MACOS build_type)
#    SET( CMAKE_OSX_ARCHITECTURES "i386;x86_64"  )
#
#    BUILD_PLATFORM(${build_type} "macOS/10.2" "macos")
#endfunction()
#
#function(BUILD_TVOS build_type)
#
#    SET( CMAKE_BUILD_TYPE ${build_type} )
#    SET( PLATFORM appletvos )
#    SET( FRAMEWORK ON  )
#    SET( SIMULATOR OFF )
#    SET( CMAKE_TOOLCHAIN_FILE "${NJLI_THIRDPARTY_DIRECTORY}/apple.toolchain.cmake" )
#    BUILD_PLATFORM(${build_type} "tvOS/10.1/OS" "tvos")
#
#    SET( CMAKE_BUILD_TYPE ${build_type} )
#    SET( PLATFORM appletvos )
#    SET( FRAMEWORK ON  )
#    SET( SIMULATOR ON )
#    SET( CMAKE_TOOLCHAIN_FILE "${NJLI_THIRDPARTY_DIRECTORY}/apple.toolchain.cmake" )
#    BUILD_PLATFORM(${build_type} "tvOS/10.1/SIMULATOR" "tvos")
#    
#endfunction()
#
#function(BUILD_WINDOWS build_type)
#endfunction()


IF(GENERATE_LIB)
    EXECUTE_PROCESS(COMMAND swig -w312 -w201 -O -c++ -lua -includeall -ignoremissing -features directors,autodoc=1 -xmlout ${CMAKE_CURRENT_BINARY_DIR}/njli.xml -o "${NJLI_SOURCE_DIRECTORY}/generated/swig/lua/njli_wrap.cxx" "${CMAKE_SOURCE_DIR}/src/swig.in/lua/hello.swg"
        WORKING_DIRECTORY ${NJLI_SOURCE_DIRECTORY}
        RESULT_VARIABLE swig_result
        OUTPUT_VARIABLE swig_ver)
    MESSAGE(STATUS "${swig_result}")
    MESSAGE(STATUS "${swig_ver}")
    INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/njli.xml DESTINATION ${CMAKE_INSTALL_DATADIR}/swig/lua)
    
    SET( BUILD_COUNTER 1 )
    BUILD_PLATFORM()
ENDIF()

IF(GENERATE_DOCUMENTATION)
    BUILD_DOCUMENTATION()
ENDIF()


#BUILD_EMSCRIPTEN(Debug)
#BUILD_EMSCRIPTEN(Release)
#BUILD_EMSCRIPTEN(RelWithDebugInfo)
#BUILD_EMSCRIPTEN(MinsizeRel)
#
#BUILD_MACOS(Debug)
#BUILD_MACOS(Release)
#BUILD_MACOS(RelWithDebugInfo)
#BUILD_MACOS(MinsizeRel)
#
#BUILD_TVOS(Debug)
#BUILD_TVOS(Release)
#BUILD_TVOS(RelWithDebugInfo)
#BUILD_TVOS(MinsizeRel)
#
#BUILD_IOS(Debug)
#BUILD_IOS(Release)
#BUILD_IOS(RelWithDebugInfo)
#BUILD_IOS(MinsizeRel)
#
#BUILD_ANDROID(Debug)
#BUILD_ANDROID(Release)
#BUILD_ANDROID(RelWithDebugInfo)
#BUILD_ANDROID(MinsizeRel)

#BUILD_WINDOWS(Debug)
#BUILD_WINDOWS(Release)
#BUILD_WINDOWS(RelWithDebugInfo)
#BUILD_WINDOWS(MinsizeRel)

#BUILD_LINUX(Debug)
#BUILD_LINUX(Release)
#BUILD_LINUX(RelWithDebugInfo)
#BUILD_LINUX(MinsizeRel)



# build a CPack driven installer package
include (InstallRequiredSystemLibraries)

SET (CPACK_PACKAGE_DESCRIPTION_SUMMARY "NJLIGameEngine libraries.")
SET (CPACK_PACKAGE_VENDOR "NJLIGames LLC.")
SET (CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/README.md")
SET (CPACK_RESOURCE_FILE_LICENSE  "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
SET (CPACK_PACKAGE_VERSION_MAJOR "${NJLIGameEngine_VERSION_MAJOR}")
SET (CPACK_PACKAGE_VERSION_MINOR "${NJLIGameEngine_VERSION_MINOR}")
SET (CPACK_PACKAGE_VERSION_PATCH "1")
SET (CPACK_PACKAGE_CONTACT "jamesfolk1@gmail.com" )
SET (CPACK_PACKAGE_INSTALL_DIRECTORY "CMake ${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}")


